//начало текста модуля

///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеФормыСИменемСталоРавным(Парам01,Парам02)","ПолеФормыСИменемСталоРавным","Тогда поле формы с именем ""ЧасыФакт"" стало равным '15'");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПодготавливаюКонстантуСНаименованием(Парам01)","ЯПодготавливаюКонстантуСНаименованием","Допустим я подготавливаю константу с наименованием ""узИспользоватьУчетВремени""");
	
	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
Функция ПолучитьАктивноеОкноИзТестовоеПриложение()
	Возврат КонтекстСохраняемый.ТестовоеПриложение.ПолучитьАктивноеОкно();
КонецФункции	

&НаКлиенте
Функция ПолучитьАктивноеОкноИзКонтекста()
	Возврат Контекст.АктивноеОкно;
КонецФункции	

&НаКлиенте
Функция НайтиПолеПоИмени(ИмяПоля,НужнаяФорма = Неопределено)
	Получилось = Ложь;
	Если Не Получилось Тогда
		Если НужнаяФорма = Неопределено Тогда
			ОкноПриложения         = ПолучитьАктивноеОкноИзТестовоеПриложение();
			НужнаяФорма           = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"));
		КонецЕсли;	 
		
		Если НужнаяФорма = Неопределено Тогда
			//иногда 1С некорректно отдаёт текущее окно, тогда будем искать во всех окнах
			//сначала поищем в недавно открытом окне
			
			Попытка
				ОкноПриложения = ПолучитьАктивноеОкноИзКонтекста();
				НужнаяФорма    = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"));
			Исключение
				
			КонецПопытки;
			
			//Если НужнаяФорма = Неопределено Тогда
			//	//затем будем искать во всех окнах
			//	МассивОкон = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
			//	Для каждого ТекОкно Из МассивОкон Цикл
			//		
			//		НужнаяФорма    = ТекОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
			//		Если НужнаяФорма <> Неопределено Тогда
			//			Контекст.Вставить("АктивноеОкно",ОкноПриложения); //произошла неявная смена активного окна
			//		КонецЕсли;	 
			//		
			//	КонецЦикла;
			//	
			//КонецЕсли;	 
		КонецЕсли;	 
		
		
		Если ИмяПоля = "" Тогда
			Поле = НужнаяФорма.НайтиОбъект(Тип("ТестируемоеПолеФормы"));
		Иначе	
			Поле = НужнаяФорма.НайтиОбъект(Тип("ТестируемоеПолеФормы"),,ИмяПоля);
		КонецЕсли;	 
		
	КонецЕсли;	 
	
	Возврат Поле;
КонецФункции	

&НаСервере
Процедура УстановитьЗначениеКонстаны(ИмяКонстанты, Результат)
	Константы[ИмяКонстанты].Установить(Результат);
КонецПроцедуры

&НаКлиенте
//Допустим я подготавливаю константу с наименованием "узИспользоватьУчетВремени"
//@ЯПодготавливаюКонстантуСНаименованием(Парам01)
Процедура ЯПодготавливаюКонстантуСНаименованием(ИмяКонстанты) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	СостояниеVanessaBehavior = Ванесса.ПолучитьСостояниеVanessaBehavior();
	ИмяСценария = СостояниеVanessaBehavior.ТекущийСценарий.Имя;
	Если ИмяСценария = "Включение механизма ""Учет времени по задачам""" Тогда
		УстановитьЗначениеКонстаны(ИмяКонстанты, ЛОЖЬ);
	Иначе
		УстановитьЗначениеКонстаны(ИмяКонстанты, ИСТИНА);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
//Тогда поле формы с именем "ЧасыФакт" стало равным '15'
//@ПолеФормыСИменемСталаРавным(Парам01,Парам02)
Процедура ПолеФормыСИменемСталоРавным(ИмяПоля,Результат) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	Поле = НайтиПолеПоИмени(ИмяПоля);
	ДанныеПоля = Поле.ПолучитьПредставлениеДанных();
	
	Ванесса.ПроверитьРавенство(ДанныеПоля,Результат,"Ожидаемое значение поля.");
КонецПроцедуры

//окончание текста модуля