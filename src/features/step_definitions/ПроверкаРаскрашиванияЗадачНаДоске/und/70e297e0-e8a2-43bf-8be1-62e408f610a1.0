{3,
{42,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0,0,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3},0,"","",1,
{21,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{10,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,"",0,0,0,0,0,0,3,3,0,0,0},"//начало текста модуля

///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯУстанавливаюЗначениеРеквизитаДляЭлементаСправочникаСИменем(Парам01,Парам02,Парам03,Парам04)"",""ЯУстанавливаюЗначениеРеквизитаДляЭлементаСправочникаСИменем"",""И     я устанавливаю значение реквизита """"ЦветВажности"""" """"Красный"""" для элемента справочника """"узВариантыВажностиЗадачи"""" с именем """"ЭтоТестоваяВажность"""""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВФормеВТаблицеЯВижуЦветФона(Парам01,Парам02,Парам03)"",""ВФормеВТаблицеЯВижуЦветФона"",""И     В форме """"Канбан доска"""" в таблице """"ТЧЗадачиЗарегистрирована"""" я вижу цвет фона """"Красный"""""");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
	ПредставлениеСправочника = ""узЗадачи"";
	ЭлементСправочника = утвПолучитьЭлементГруппуСправочника(ПредставлениеСправочника, , ""ЭтоТестоваяЗадача1"",,ИСТИНА);
	утвУдалитьЭлементСправочника(ПредставлениеСправочника, ЭлементСправочника);
	ЭлементСправочника = утвПолучитьЭлементГруппуСправочника(ПредставлениеСправочника, , ""ЭтоТестоваяЗадача2"",,ИСТИНА);
	утвУдалитьЭлементСправочника(ПредставлениеСправочника, ЭлементСправочника);
	ЭлементСправочника = утвПолучитьЭлементГруппуСправочника(ПредставлениеСправочника, , ""ЭтоТестоваяЗадача3"",,ИСТИНА);
	утвУдалитьЭлементСправочника(ПредставлениеСправочника, ЭлементСправочника);
	ЭлементСправочника = утвПолучитьЭлементГруппуСправочника(ПредставлениеСправочника, , ""ЭтоТестоваяЗадача4"",,ИСТИНА);
	утвУдалитьЭлементСправочника(ПредставлениеСправочника, ЭлементСправочника);
	ЭлементСправочника = утвПолучитьЭлементГруппуСправочника(ПредставлениеСправочника, , ""ЭтоТестоваяОсновнаяЗадача"",,ИСТИНА);
	утвУдалитьЭлементСправочника(ПредставлениеСправочника, ЭлементСправочника);
	
	ПредставлениеСправочника = ""узВариантыВажностиЗадачи"";
	ЭлементСправочника = утвПолучитьЭлементГруппуСправочника(ПредставлениеСправочника, , ""ЭтоТестоваяВажность"",,ИСТИНА);
	утвУдалитьЭлементСправочника(ПредставлениеСправочника, ЭлементСправочника);
	
	ПредставлениеСправочника = ""узСпринты"";
	ЭлементСправочника = утвПолучитьЭлементГруппуСправочника(ПредставлениеСправочника, , ""ЭтоТестовыйСпринт"",,ИСТИНА);
	утвУдалитьЭлементСправочника(ПредставлениеСправочника, ЭлементСправочника);
КонецПроцедуры

///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//И     я устанавливаю значение реквизита ""ЦветВажности"" ""Красный"" для элемента справочника ""узВариантыВажностиЗадачи"" с именем ""ЭтоТестоваяВажность""
//@ЯУстанавливаюЗначениеРеквизитаДляЭлементаСправочникаСИменем(Парам01,Парам02,Парам03,Парам04)
Процедура ЯУстанавливаюЗначениеРеквизитаДляЭлементаСправочникаСИменем(ИмяРеквизита,ИмяЦвета,ПредставлениеСправочника,НаименованиеЭлемента) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ТекЦвет = ПолучитьЦветПоИмени(ИмяЦвета);
	//ХранилищеТекЦвет = Новый ХранилищеЗначения(ТекЦвет);
	ЭлементСправочника = утвПолучитьЭлементГруппуСправочника(ПредставлениеСправочника, , НаименованиеЭлемента);
	УстановитьЗначениеРеквизитаСправочника(ЭлементСправочника, ИмяРеквизита, ТекЦвет, ИСТИНА);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЦветПоИмени(ИмяЦвета)
	Если ИмяЦвета = ВаринтыЦвета().Красный Тогда
		ТекЦвет = Новый Цвет(255,0,0);
	ИначеЕсли ИмяЦвета = ВаринтыЦвета().Зеленый Тогда
		ТекЦвет = Новый Цвет(0,255,0);
	ИначеЕсли ИмяЦвета = ВаринтыЦвета().Синий Тогда
		ТекЦвет = Новый Цвет(0,0,255);
	ИначеЕсли ИмяЦвета = ВаринтыЦвета().Оранжевый Тогда
		ТекЦвет = Новый Цвет(255,165,0);
	КонецЕсли; 
	
	Возврат ТекЦвет;
КонецФункции

&НаКлиенте
Функция ВаринтыЦвета()
	Вариант = Новый Структура;
	Вариант.Вставить(""Красный""	,""Красный"");
	Вариант.Вставить(""Зеленый""	,""Зеленый"");
	Вариант.Вставить(""Синий""	,""Синий"");
	Вариант.Вставить(""Оранжевый"",""Оранжевый"");
	
	Возврат Новый ФиксированнаяСтруктура(Вариант);
КонецФункции

&НаСервере
Функция утвПолучитьЭлементГруппуСправочника(ИмяСправочника, Код = """", Наименование = """", ИскатьГруппу = Ложь, ДолженБыть = ЛОЖЬ)
	ПредставлениеПоиска = """";
	
	Если Истина
		И ПустаяСтрока(Код)                      
		И ПустаяСтрока(Наименование)
		Тогда
		
		ВызватьИсключение ""Не заполнено ни одно свойство поиска"";
		
	ИначеЕсли Истина
		И ЗначениеЗаполнено(Код)
		И ЗначениеЗаполнено(Наименование)
		Тогда
		
		ПредставлениеПоиска = ""коду """""" + Код + """""" и наименованию """""" + Наименование + """""""";
		
	ИначеЕсли ЗначениеЗаполнено(Код) Тогда
		ПредставлениеПоиска = ""коду """""" + Код + """""""";
		
	ИначеЕсли ЗначениеЗаполнено(Наименование) Тогда
		ПредставлениеПоиска = ""наименованию """""" + Наименование + """""""";
		
	КонецЕсли;
	
	ТекстИсключения = ""Не нашли #ГруппуИлиЭлемент справочника #ИмяСправочника по #ПредставлениеПоиска"";
	
	ТекстИсключения = СтрЗаменить(ТекстИсключения, ""#ГруппуИлиЭлемент""	 , ?(ИскатьГруппу, ""группу"", ""элемент""));
	ТекстИсключения = СтрЗаменить(ТекстИсключения, ""#ИмяСправочника""	 , ИмяСправочника);
	ТекстИсключения = СтрЗаменить(ТекстИсключения, ""#ПредставлениеПоиска"", ПредставлениеПоиска);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	Справочник.Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Справочник
	|ГДЕ
	|	&МоиУсловия"";
	
	ТекстМоиУсловия = """";
	
	Если ИскатьГруппу Тогда
		СформироватьТекстУсловияЗапроса(ТекстМоиУсловия, ""Справочник.ЭтоГруппа = &ИскатьГруппу"");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Код) Тогда
		СформироватьТекстУсловияЗапроса(ТекстМоиУсловия, ""Справочник.Код = &Код"");
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		СформироватьТекстУсловияЗапроса(ТекстМоиУсловия, ""Справочник.Наименование = &Наименование"");
	КонецЕсли; 
	
	Если ПустаяСтрока(ТекстМоиУсловия) Тогда
		ТекстМоиУсловия = ""ИСТИНА"";
	КонецЕсли; 
	
	СтрокаЗаменыСправочника = ""Справочник."" + ИмяСправочника + "" КАК Справочник"";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ""&МоиУсловия"", ТекстМоиУсловия);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ""Справочник.Пользователи КАК Справочник"", СтрокаЗаменыСправочника);
	
	Запрос.УстановитьПараметр(""ИскатьГруппу"", ИскатьГруппу);
	Запрос.УстановитьПараметр(""Код"", Код);
	Запрос.УстановитьПараметр(""Наименование"", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если ДолженБыть И РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();

	Возврат ВыборкаДетальныеЗаписи.Ссылка;
КонецФункции

&НаСервере
Процедура УстановитьЗначениеРеквизитаСправочника(ЭлементСправочника, ИмяРеквизита, Значение, ЗначениеВХранилище = ЛОЖЬ)
	СпрОбъект = ЭлементСправочника.ПолучитьОбъект();
	Если ЗначениеВХранилище Тогда
		СпрОбъект[ИмяРеквизита] = Новый ХранилищеЗначения(Значение);
	Иначе
		СпрОбъект[ИмяРеквизита] = Значение;
	КонецЕсли;
	СпрОбъект.Записать();
КонецПроцедуры

&НаСервере
Процедура СформироватьТекстУсловияЗапроса(ТекстРезультат, ТекстУсловия)
	Если НЕ ПустаяСтрока(ТекстРезультат) Тогда
		ТекстРезультат = ТекстРезультат + "" И ""
	КонецЕсли; 
	ТекстРезультат = ТекстРезультат + ТекстУсловия;
КонецПроцедуры

&НаСервере
Процедура утвУдалитьЭлементСправочника(ИмяСправочника, ЭлементСправочника)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	Справочник.Ссылка
	|ИЗ
	|	Справочник."" + ИмяСправочника + "" КАК Справочник
	|ГДЕ
	|	Справочник.Ссылка = &ЭлементСправочника"";
	
	Запрос.УстановитьПараметр(""ЭлементСправочника"", ЭлементСправочника);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЭлементОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		ЭлементОбъект.Удалить();
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
//И В открытой форме в таблице с именем ""ДеревоТестов"" в колонке ""Имя"" есть значение ""ОткрытиеФормы""
//@ВОткрытойФормеВТаблицеСИменемВКолонкеЕстьЗначение(Парам01,Парам02,Парам03)
Процедура ВОткрытойФормеВТаблицеСИменемВКолонкеЕстьЗначение(ИмяТЧ,ИмяКолонки,ПроверяемоеЗначение) Экспорт
	ТЧ         = НайтиТЧПоИмени(ИмяТЧ);
	ЗначениеТЧ = ПолучитьСтрокиИзТаблицыTestClient(ТЧ);
	
	Нашли = Ложь;
	
	НомСтр = 0;
	Для каждого СтрокаТЧ Из ЗначениеТЧ Цикл
		НомСтр = НомСтр + 1;
		
		Значение = СтрокаТЧ[ИмяКолонки];
		Если Значение = Неопределено Тогда
			Стр = ""В таблице <"" + ИмяТЧ + "">  нет колонки <"" + ИмяКолонки + "">"";
			Сообщить(Стр);
			ВызватьИсключение Стр;
		КонецЕсли;	 
		Если Значение = ПроверяемоеЗначение Тогда
			Нашли = Истина;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если Не Нашли Тогда
		Стр = ""В таблице <"" + ИмяТЧ + "">  НЕ найдено значение "" + ПроверяемоеЗначение + "", а оно должно было быть."";
		Сообщить(Стр);
		ВызватьИсключение Стр;
	КонецЕсли;	 	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокиИзТаблицыTestClient(ТЧ)
	ТЧ.ПерейтиКПервойСтроке();//чтобы проверить, что строки вообще есть
	ТекЭлемент = ТЧ.ПолучитьТекстЯчейки();//чтобы проверить, что строки вообще есть
	
	ТЧ.ВыделитьВсеСтроки();
	ЗначениеТЧ = ТЧ.ПолучитьВыделенныеСтроки();
	Возврат ЗначениеТЧ;
КонецФункции	

&НаКлиенте
//И     В форме ""Канбан доска"" в таблице ""ТЧЗадачиЗарегистрирована"" я вижу цвет фона ""Красный""
//@ВФормеВТаблицеЯВижуЦветФона(Парам01,Парам02,Парам03)
Процедура ВФормеВТаблицеЯВижуЦветФона(ИмяФормы,ИмяТЧ,ИмяЦвета) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ТекЦвет 	= ПолучитьЦветПоИмени(ИмяЦвета);
	НужнаяФорма = НайтиФормуПоЗаголовку(ИмяФормы);
	ТЧ          = НайтиТЧПоИмени(ИмяТЧ,НужнаяФорма);
	//ТЧ.Выбрать();
	
	СтрокиТЧ = ПолучитьСтрокиИзТаблицыTestClient(ТЧ);
КонецПроцедуры

&НаКлиенте
Функция НайтиФормуПоЗаголовку(ИмяФормы)
	ОкноПриложения = ПолучитьАктивноеОкноИзТестовоеПриложение();
	НужнаяФорма    = ОкноПриложения.НайтиОбъект(Тип(""ТестируемаяФорма""), ИмяФормы);
	Если НужнаяФорма = Неопределено Тогда
		//иногда 1С некорректно отдаёт текущее окно, тогда будем искать во всех окнах
		//сначала поищем в недавно открытом окне
		
		Попытка
			ОкноПриложения = ПолучитьАктивноеОкноИзКонтекста();
			НужнаяФорма    = ОкноПриложения.НайтиОбъект(Тип(""ТестируемаяФорма""), ИмяФормы);
			Если НужнаяФорма <> Неопределено Тогда
				Контекст.Вставить(""АктивноеОкно"",ОкноПриложения); //произошла неявная смена активного окна
				Возврат НужнаяФорма;
			КонецЕсли;	 
		Исключение
			
		КонецПопытки;
		
		
		//затем будем искать во всех окнах
		МассивОкон = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип(""ТестируемоеОкноКлиентскогоПриложения""));
		Для каждого ТекОкно Из МассивОкон Цикл
			
			НужнаяФорма    = ТекОкно.НайтиОбъект(Тип(""ТестируемаяФорма""), ИмяФормы);
			Если НужнаяФорма <> Неопределено Тогда
				Контекст.Вставить(""АктивноеОкно"",ТекОкно); //произошла неявная смена активного окна
				Возврат НужнаяФорма;
			КонецЕсли;	 
			
		КонецЦикла;
	КонецЕсли;	 
	
	Если НужнаяФорма = Неопределено Тогда
		Стр = ""Форма с заголовком <"" + ИмяФормы + ""> не найдена!"";
		Сообщить(Стр);
		ВызватьИсключение Стр;
	КонецЕсли;	 
	
	Контекст.Вставить(""АктивноеОкно"",ОкноПриложения); //произошла неявная смена активного окна
	Возврат НужнаяФорма;
КонецФункции	

&НаКлиенте
Функция НайтиТЧПоИмени(ИмяТЧ,НужнаяФорма = Неопределено)
	Получилось = Ложь;
	Если Не Получилось Тогда
		Если НужнаяФорма = Неопределено Тогда
			ОкноПриложения         = ПолучитьАктивноеОкноИзТестовоеПриложение();
			НужнаяФорма           = ОкноПриложения.НайтиОбъект(Тип(""ТестируемаяФорма""));
		КонецЕсли;	 
		
		Если НужнаяФорма = Неопределено Тогда
			//иногда 1С некорректно отдаёт текущее окно, тогда будем искать во всех окнах
			//сначала поищем в недавно открытом окне
			
			Попытка
				ОкноПриложения = ПолучитьАктивноеОкноИзКонтекста();
				НужнаяФорма    = ОкноПриложения.НайтиОбъект(Тип(""ТестируемаяФорма""));
			Исключение
				
			КонецПопытки;
			
			//Если НужнаяФорма = Неопределено Тогда
			//	//затем будем искать во всех окнах
			//	МассивОкон = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип(""ТестируемоеОкноКлиентскогоПриложения""));
			//	Для каждого ТекОкно Из МассивОкон Цикл
			//		
			//		НужнаяФорма    = ТекОкно.НайтиОбъект(Тип(""ТестируемаяФорма""));
			//		Если НужнаяФорма <> Неопределено Тогда
			//			Контекст.Вставить(""АктивноеОкно"",ОкноПриложения); //произошла неявная смена активного окна
			//		КонецЕсли;	 
			//		
			//	КонецЦикла;
			//	
			//КонецЕсли;	 
		КонецЕсли;	 
		
		
		Если ИмяТЧ = """" Тогда
			ТЧ                     = НужнаяФорма.НайтиОбъект(Тип(""ТестируемаяТаблицаФормы""));
		Иначе	
			ТЧ                     = НужнаяФорма.НайтиОбъект(Тип(""ТестируемаяТаблицаФормы""),,ИмяТЧ);
		КонецЕсли;	 
		
	КонецЕсли;	 
	
	Возврат ТЧ;
КонецФункции	

&НаКлиенте
Функция ПолучитьАктивноеОкноИзТестовоеПриложение()
	Возврат КонтекстСохраняемый.ТестовоеПриложение.ПолучитьАктивноеОкно();
КонецФункции	

&НаКлиенте
Функция ПолучитьАктивноеОкноИзКонтекста()
	Возврат Контекст.АктивноеОкно;
КонецФункции	

//окончание текста модуля",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",1fa267af-3d54-4f70-ac00-718486d7aafd}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0},0,0}