
Процедура ПередЗаписью(Отказ)
	Если НЕ ЗначениеЗаполнено(ДатаСоздания) Тогда
		ДатаСоздания = ТекущаяДата();		
	Конецесли;
	ОсновнаяЗадача = ПолучитьОсновнуюЗадачу(Родитель);
	Если НЕ ЗначениеЗаполнено(Статус) Тогда
		Статус = ПредопределенноеЗначение("Справочник.узСтатусыЗадачи.Зарегистрирована");		
	Конецесли;	
	
	
	пЕстьПодчиненныеЗадачи = ЕстьПодчиненныеЗадачи(Ссылка);	
	Если НЕ ДополнительныеСвойства.Свойство("узЭтоЗаписьРодителя") Тогда
		ЕстьПодчиненныеЗадачи = пЕстьПодчиненныеЗадачи;
	Конецесли;	
	
	НовыйРодитель = Родитель;
	Если ЗначениеЗаполнено(НовыйРодитель)
		И НЕ НовыйРодитель.ЕстьПодчиненныеЗадачи Тогда
		НовыйРодительОбъект = НовыйРодитель.ПолучитьОбъект();
		НовыйРодительОбъект.ЕстьПодчиненныеЗадачи = Истина;
		НовыйРодительОбъект.ДополнительныеСвойства.Вставить("узЭтоЗаписьРодителя");
		НовыйРодительОбъект.Записать();
	Конецесли;
	Если НЕ ЭтоНовый() Тогда
		СтарыйРодитель = Ссылка.ПолучитьОбъект().Родитель;
		Если СтарыйРодитель <> НовыйРодитель Тогда
			пЕстьПодчиненныеЗадачи = ЕстьПодчиненныеЗадачи(СтарыйРодитель,Ссылка);
			Если ЗначениеЗаполнено(СтарыйРодитель)
				И пЕстьПодчиненныеЗадачи <> СтарыйРодитель.ЕстьПодчиненныеЗадачи Тогда
				СтарыйРодительОбъект = СтарыйРодитель.ПолучитьОбъект();
				СтарыйРодительОбъект.ЕстьПодчиненныеЗадачи = пЕстьПодчиненныеЗадачи;
				СтарыйРодительОбъект.ДополнительныеСвойства.Вставить("узЭтоЗаписьРодителя");
				СтарыйРодительОбъект.Записать();
			Конецесли;
		Конецесли;
	Конецесли;	
	
	ТекПользователь = Пользователи.ТекущийПользователь();
	ДатаПоследнегоИзменения = ТекущаяДата();
	АвторПоследнегоИзменения = ТекПользователь;

	СтарыйСтатус = Ссылка.Статус;
	
	СтарыйВидСтатуса = СтарыйСтатус.ВидСтатуса;
	НовыйВидСтатуса = Статус.ВидСтатуса;
	ВидСтатуса_Готово = ПредопределенноеЗначение("Справочник.узВидыСтатусов.Готово");
	ВидСтатуса_ВРаботе = ПредопределенноеЗначение("Справочник.узВидыСтатусов.ВРаботе");
	Если НовыйВидСтатуса = ВидСтатуса_Готово
		И СтарыйВидСтатуса <> ВидСтатуса_Готово Тогда
		ДатаВыполнения = ТекущаяДата();
	Конецесли;
	Если НовыйВидСтатуса = ВидСтатуса_ВРаботе
		И СтарыйВидСтатуса <> ВидСтатуса_ВРаботе Тогда
		Если НЕ ЗначениеЗаполнено(Исполнитель) Тогда
			Исполнитель = ТекПользователь; 
		Конецесли;
	Конецесли;
	
	МассивСобытийВИстории = ОбновитьИсторию();
	
	ДополнительныеСвойства.Вставить("МассивСобытийВИстории",МассивСобытийВИстории);
		
КонецПроцедуры

Функция ОбновитьИсторию()
	МассивСобытийВИстории = Новый Массив();
	
	ДатаСобытия = ТекущаяДата();
	пАвтор = Пользователи.ТекущийПользователь();
	
	Если ЭтоНовый() Тогда
		ВидСобытия = ПредопределенноеЗначение("Перечисление.узВидыСобытий.ДобавленаЗадача");
		Событие = "Добавлена задача";
		ДобавитьВИсторию(ДатаСобытия,пАвтор,ВидСобытия,Событие,МассивСобытийВИстории);
		Возврат МассивСобытийВИстории;
	Конецесли;	
	
	СтарыйИсполнитель = Ссылка.Исполнитель;
	Если Исполнитель <> СтарыйИсполнитель Тогда
		ВидСобытия = ПредопределенноеЗначение("Перечисление.узВидыСобытий.НовыйИсполнитель");
		Если НЕ ЗначениеЗаполнено(СтарыйИсполнитель) Тогда
			Событие = "Указан исполнитель [" + Исполнитель+"]";
		Иначе
			Событие = "Изменен исполнитель с ["+СтарыйИсполнитель+"] на [" + Исполнитель+"]";
		Конецесли;
		ДобавитьВИсторию(ДатаСобытия,пАвтор,ВидСобытия,Событие,МассивСобытийВИстории);		
	Конецесли;
	
	СтарыйСтатус = Ссылка.Статус;
	Если Статус <> СтарыйСтатус Тогда
		ВидСобытия = ПредопределенноеЗначение("Перечисление.узВидыСобытий.ИзменениеСтатуса");
		Событие = "Изменен статус с ["+СтарыйСтатус+"] на [" + Статус+"]";
		ДобавитьВИсторию(ДатаСобытия,пАвтор,ВидСобытия,Событие,МассивСобытийВИстории);		
	Конецесли;
	
	СтарыеКомментарии = Ссылка.Комментарии;
	Если Комментарии.Количество() <> СтарыеКомментарии.Количество() Тогда
		ВидСобытия = ПредопределенноеЗначение("Перечисление.узВидыСобытий.ДобавленКомментарий");
		Событие = "Добавлен новый комментарий";
		ДобавитьВИсторию(ДатаСобытия,пАвтор,ВидСобытия,Событие,МассивСобытийВИстории);		
	Конецесли;
	
	СтароеНаименование = СокрЛП(Ссылка.Наименование);
	СтароеТекстСодержания = СокрЛП(Ссылка.ТекстСодержания);
	Если СокрЛП(Наименование) <> СтароеНаименование
		ИЛИ СокрЛП(ТекстСодержания) <> СтароеТекстСодержания Тогда
		ВидСобытия = ПредопределенноеЗначение("Перечисление.узВидыСобытий.ИзмененоОписаниеЗадачи");
		Событие = "Изменено описание задачи";
		ДобавитьВИсторию(ДатаСобытия,пАвтор,ВидСобытия,Событие,МассивСобытийВИстории);		
	Конецесли;
	
	История.Сортировать("ДатаСобытия УБЫВ");
	
	Возврат МассивСобытийВИстории;
	
	
КонецФункции

Процедура ДобавитьВИсторию(ДатаСобытия,пАвтор,ВидСобытия,Событие,МассивСобытийВИстории)
	СтрокаИстория = История.Добавить();
	СтрокаИстория.ДатаСобытия = ДатаСобытия;
	СтрокаИстория.Автор = пАвтор;
	СтрокаИстория.ВидСобытия = ВидСобытия;
	СтрокаИстория.Событие = Событие;
	
	МассивСобытийВИстории.Добавить(ВидСобытия);
КонецПроцедуры 

Процедура ОтправитьУведомлениеНаПочту(МассивСобытийВИстории)
	ТекПользователь = Пользователи.ТекущийПользователь(); 
	
	Если Исполнитель.узНеОтправлятьУведомленияНаПочту Тогда
		Возврат;
	Конецесли;
	
	Если ТекПользователь = Исполнитель Тогда			
		Возврат;
	Конецесли;	
	
	ВсегоСобытий = МассивСобытийВИстории.Количество();
	Если ВсегоСобытий = 0 Тогда
		Возврат;
	Конецесли;
	
	НеобходимоОтправитьУведомление = Ложь;
	
	ТемаПисьмаСобытие = "";
	
	ВидыСобытий_ДобавленаЗадача = ПредопределенноеЗначение("Перечисление.узВидыСобытий.ДобавленаЗадача");
	ВидыСобытий_НовыйИсполнитель = ПредопределенноеЗначение("Перечисление.узВидыСобытий.НовыйИсполнитель");
	ВидыСобытий_ДобавленКомментарий = ПредопределенноеЗначение("Перечисление.узВидыСобытий.ДобавленКомментарий");
	ВидыСобытий_ИзмененоОписаниеЗадачи = ПредопределенноеЗначение("Перечисление.узВидыСобытий.ИзмененоОписаниеЗадачи");
	
	МассивСобытийКоторыеПодлежатОтправки = Новый Массив();
	МассивСобытийКоторыеПодлежатОтправки.Добавить(ВидыСобытий_ДобавленаЗадача);
	МассивСобытийКоторыеПодлежатОтправки.Добавить(ВидыСобытий_НовыйИсполнитель);
	МассивСобытийКоторыеПодлежатОтправки.Добавить(ВидыСобытий_ДобавленКомментарий);
	//МассивСобытийКоторыеПодлежатОтправки.Добавить(ВидыСобытий_ИзмененоОписаниеЗадачи);
	
	
	Если ВсегоСобытий = 1 Тогда
		ЭлМассивСобытийВИстории = МассивСобытийВИстории[0];
		Если ЭлМассивСобытийВИстории = ВидыСобытий_ДобавленаЗадача Тогда
			НеобходимоОтправитьУведомление = Истина;
			ТемаПисьмаСобытие = "Вам была назначена задача:";			
		ИначеЕсли ЭлМассивСобытийВИстории = ВидыСобытий_НовыйИсполнитель Тогда
			НеобходимоОтправитьУведомление = Истина;
			ТемаПисьмаСобытие = "Вам была назначена задача:";
		ИначеЕсли ЭлМассивСобытийВИстории = ВидыСобытий_ДобавленКомментарий Тогда
			НеобходимоОтправитьУведомление = Истина;
			ТемаПисьмаСобытие = "Добален комментарий по задаче:";
		//ИначеЕсли ЭлМассивСобытийВИстории = ВидыСобытий_ИзмененоОписаниеЗадачи Тогда
		//	НеобходимоОтправитьУведомление = Истина;			
		//	ТемаПисьмаСобытие = "Изменено описание по задаче:";
		Конецесли;
	Иначе
		Если МассивСобытийВИстории.Найти(ВидыСобытий_НовыйИсполнитель) Тогда
			НеобходимоОтправитьУведомление = Истина;
			ТемаПисьмаСобытие = "Вам была назначена задача: ";				
		Иначе
			Для каждого ЭлМассивСобытийВИстории из МассивСобытийВИстории цикл
				Если МассивСобытийКоторыеПодлежатОтправки.Найти(ЭлМассивСобытийВИстории) <> Неопределено Тогда
					НеобходимоОтправитьУведомление = Истина;
					ТемаПисьмаСобытие = "Изменена задача: ";										
					Прервать;
				Конецесли;
			Конеццикла;	
		Конецесли;
	Конецесли;
	
		
	Если НеобходимоОтправитьУведомление Тогда
		НаименованиеЗадачи = СокрЛП(Наименование);
		НомерЗадачи = ""+Код;
		ТемаПисьма = "[#"+НомерЗадачи+"] "+ТемаПисьмаСобытие + НаименованиеЗадачи;		
		ТекстПисьма = "
		|Добрый день.
		|
		|"+ТемаПисьмаСобытие+" "+НаименованиеЗадачи+"
		|Номер задачи: #"+НомерЗадачи+"
		|";
		Если ЗначениеЗаполнено(ТекстСодержания) Тогда
			ТекстПисьма = ТекстПисьма + "
			|
			|Описание задачи: 
			|"+ТекстСодержания+"
			|";			
		Конецесли;
		ДопПараметры = Новый Структура();
		ДопПараметры.Вставить("ВажностьЗадачи",Важность);
		ДопПараметры.Вставить("ТекстПисьма",ТекстПисьма);
		ДопПараметры.Вставить("ТемаПисьма",ТемаПисьма);
		ДопПараметры.Вставить("ПользовательКому",Исполнитель);
		узОбщийМодульСервер.ОтправитьПисьмо(ДопПараметры);			
	КонецЕсли;
КонецПроцедуры 

Функция ЕстьПодчиненныеЗадачи(Задача,ЗадачаРебенок = Неопределено) Экспорт
	пЕстьПодчиненныеЗадачи = Ложь;
	Если ЭтоНовый() Тогда
		Возврат пЕстьПодчиненныеЗадачи;	
	Конецесли;
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	узЗадачи.Ссылка
	|ИЗ
	|	Справочник.узЗадачи КАК узЗадачи
	|ГДЕ
	|	узЗадачи.Ссылка В ИЕРАРХИИ(&Задача)
	|	И узЗадачи.Ссылка <> &Задача
	|	И узЗадачи.Ссылка <> &ЗадачаРебенок
	|");

	Запрос.УстановитьПараметр("Задача", Задача);
	Запрос.УстановитьПараметр("ЗадачаРебенок", ЗадачаРебенок);

	РезультатЗапроса = Запрос.Выполнить(); 
	Если НЕ РезультатЗапроса.Пустой() Тогда
		пЕстьПодчиненныеЗадачи = Истина;
	Конецесли;
	Возврат пЕстьПодчиненныеЗадачи;
КонецФункции

Функция ПолучитьОсновнуюЗадачу(СсылкаНаОбъект)
	РодителяОбъекта = СсылкаНаОбъект.Родитель;
	Если ЗначениеЗаполнено(РодителяОбъекта) Тогда
		Возврат ПолучитьОсновнуюЗадачу(РодителяОбъекта);
	Иначе
		Возврат СсылкаНаОбъект;			
	Конецесли;	
КонецФункции 

Процедура ПриУстановкеНовогоКода(СтандартнаяОбработка, Префикс)
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	МассивСобытийВИстории = ДополнительныеСвойства.МассивСобытийВИстории;
	ОтправитьУведомлениеНаПочту(МассивСобытийВИстории);
	ДополнительныеСвойства.Удалить("МассивСобытийВИстории");
КонецПроцедуры


